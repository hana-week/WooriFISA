dict1 = {} # 딕셔너리가 있어야
dict1['key'] = 'value' # 그 안에 값을 넣을 수 있듯
# 인스턴스가 있어야 인스턴스 안의 속성을 부여할 수 있습니다.
# 인스턴스를 생성할 때 딱 한번 실행되는 함수 __init__() 에서 속성을 넣습니다.

class Person:

    # 클래스변수 - 공통속성을 확인하는 함수
    nation = 'Korea'

    # 인스턴스 변수
    # 생성자함수(constructor) 클래스를 통해 인스턴스를 '생성'하는 순간 한번만 내부적으로 실행되는 함수
    def __init__(self, name, age):  # self는 자동으로 전달되지만 name, age는 꼭 전달해야하는 필수파라미터가 됩니다.
        self.name = name
        self.age = age
        self.nation = Person.nation

    def __add__(self, other): # + 연산자를 위한 던더메소드를 만들어줍니다.
        print(self.age + other.age)
        print(f'{self.name}과(와) {other.name}의 나이를 더하면 {self.age + other.age}살입니다.')

    # 인스턴스 함수
    def introduce(self):
        return f'{self.name}입니다.'

    # 클래스 함수
    @classmethod  # @로 시작하는 데코레이터
    def check_nation(cls):
        return f'현재 Person의 기본 국적은 {cls.nation}입니다.'


김연지 = Person('김연지', 30) # 만들면서 강제로 두개의 값을 입력받도록
신짱구 =  Person('신짱구', 5)
김연지 + 신짱구

Person.nation = '북한' # 클래스변수니까 클래스를 통해서만 접근 가능해야 할텐데... 파이썬 자체가 '언어'이기 때문에
김연지.nation # 클래스 변수에 인스턴스.변수명 으로도 접근이 가능한 문제가 있습니다.

# 클래스변수를 변경했는데 객체변수가 바뀌어버림....
# 신짱구.nation이 Person.nation의 주소를 참조하고 있었기 때문입니다. (객체도 변수, 파이썬은 얕은 복사)
# 그래서 파이썬에서는 클래스변수는 클래스를 통해 참조하고,
# 객체 변수는 객체 변수를 통해 참조하도록 프로그래밍해주셔야 합니다.
# 제한하는 방법은 아쉽게도 없습니다... 개발자가 구조를 잘 짜야 합니다.

# - 속성: name - 차종(str), cc - 배기량(int), is_kor 국산차여부(bool), colors  희망색깔(1,2,3순위, list)을 가집니다.
# 속성: 차종(str), 배기량(int), 국산차여부(bool), 희망색깔(1,2,3순위, list)
#           2개의 차량 인스턴스를 다시 만들어주세요
# 그리고 morning이라는 인스턴스를 하나 만들어주세요
# 기능: '{name}은 정기검사를 받으셔야 합니다'라는 안내메시지가 출력되는 check라는 메소드를 실행할 수 있습니다.
# 이외 기능을 하나 이상 만들어보세요

class Car():

    final_num = 0

    def __init__(self, name, cc, is_kor, colors, year):
        self.name = name
        self.cc = cc
        self.is_kor = is_kor
        self.colors = colors
        self.year = year
        Car.final_num += 1

    # def info(self):
    def __str__(self):  # 원래 class의 type at 메모리주소 를 출력하는 던더메소드를 오버라이딩(덮어씀)
        return f'name: {self.name}, cc: {self.cc}, is_kor: {self.is_kor}, color: {self.colors}, 연식:{self.year}'

    def check(self):
        if self.cc <= 10:
            return '정기검사를 받으셔야 합니다'
        else:
            return '배기량이 충분하므로 아직은 괜찮습니다.'

    @classmethod
    def check_num(cls):
        return f'누적 판매량: {cls.final_num}개'

    def free_repair(self):
        if self.year > 2018:
            return '무상 수리 대상 차량'
        else:
            return '무상 수리 기간 종료'

x = Car('람머르기니', 11, True, ['pink','blue', 'red'], 2020)
# print(x.info())
print(x)
print(x.check_num())
print(x.free_repair())
y = Car('테슬라', 12, True, ['pink','blue', 'red'], 2018)
print(y.check_num())
print(y.free_repair())
so = Car('G90', 11, True, ['pink','blue', 'red'], 2023)
print(so.check_num())
print(so.free_repair())

class Car():

    final_num = 0

    def __init__(self, name, cc, is_kor, colors, year):
        self.name = name
        self.cc = cc
        self.is_kor = is_kor
        self.colors = colors
        self.year = year
        Car.final_num += 1

    def __str__(self):
        return f'name: {self.name}, cc: {self.cc}, is_kor: {self.is_kor}, color: {self.colors}, 연식:{self.year}'

    def check(self):
        if self.cc <= 10:
            return '정기검사를 받으셔야 합니다'
        else:
            return '배기량이 충분하므로 아직은 괜찮습니다.'

    def __gt__(self, other): # 오버라이딩 - 바꿔씀  x > y   => x.__gt__(y)
        if self.cc > other.cc:
            return True
        else:
            return False

    def __ge__(self, other): # 오버라이딩 - 바꿔씀  x >= y   => x.__ge__(y)
        if self.cc >= other.cc:
            return True
        else:
            return False

    @classmethod
    def check_num(cls):
        return f'누적 판매량: {cls.final_num}개'



x = Car('람머르기니', 300, True, ['pink','blue', 'red'], 2020)
y = Car('테슬라', 3000, True, ['pink','blue', 'red'], 2018)
so = Car('G90', 11, True, ['pink','blue', 'red'], 2023)

# 각 차의 배기량을 등호/부등호로 확인해서 True/False로 리턴하도록 던더메서드를 활용해보세요.
# https://docs.python.org/ko/3.11/reference/datamodel.html#object.__eq__ 참조

# y > x 하면 True
# y == x 하면 False

class Car():

    final_num = 0

    def __init__(self, name, cc, is_kor, colors, year):
        self.name = name
        self.cc = cc
        self.is_kor = is_kor
        self.colors = colors
        self.year = year
        Car.final_num += 1

    def __str__(self):
        return f'name: {self.name}, cc: {self.cc}, is_kor: {self.is_kor}, color: {self.colors}, 연식:{self.year}'

    def check(self):
        if self.cc <= 10:
            return '정기검사를 받으셔야 합니다'
        else:
            return '배기량이 충분하므로 아직은 괜찮습니다.'

    # 이제부터 > 를 실행하면 내가 법이다.
    def __gt__(self, other): # 오버라이딩 - 바꿔씀  x > y   => x.__gt__(y)
        if self.cc > other.cc:
            return True
        else:
            return False

    def __ge__(self, other): # 오버라이딩 - 바꿔씀  x >= y   => x.__ge__(y)
        if self.cc >= other.cc:
            return True
        else:
            return False

    @classmethod
    def check_num(cls):
        return f'누적 판매량: {cls.final_num}개'




x = Car('람머르기니', 300, True, ['pink','blue', 'red'], 2020)
y = Car('테슬라', 3000, True, ['pink','blue', 'red'], 2018)
so = Car('G90', 11, True, ['pink','blue', 'red'], 2023)

# 각 차의 배기량을 등호/부등호로 확인해서 True/False로 리턴하도록 던더메서드를 활용해보세요.
# https://docs.python.org/ko/3.11/reference/datamodel.html#object.__eq__ 참조

# y > x 하면 True
# y == x 하면 False

[1, 2, 3, 4] + 5 # + 는 __add__ 던더메소드

import numpy as np

li = np.array([1, 2, 3, 4])
li + 5 # __add__ 던더 메소드는

class SportsCar(Car): # Car의 속성과 기능을 상속받은 SportsCar 라는 하위클래스
    # 변수의 오버라이딩
    final_num = 0

    # 오버라이딩  super()를 통해서 부모클래스의 __init__을 가져와서 속성들을 거기에 넣어주고
    def __init__(self, name, cc, is_kor, colors, year):
        super().__init__(name, cc, is_kor, colors, year)
    # def __init__( name, cc, is_kor, colors, year):
    #     self.name = name
    #     self.cc = cc
    #     self.is_kor = is_kor
    #     self.colors = colors
    #     self.year = year
    #     Car.final_num += 1
        SportsCar.final_num += 1 # 마지막에 이 값을 사용하겠음

x = SportsCar('람머르기니', 300, True, ['pink','blue', 'red'], 2020)
SportsCar.check_num()

class RegularCar(Car):

    final_num = 0

    def __init__(self, name, cc, is_kor, colors, year):
        super().__init__(name, cc, is_kor, colors, year)
        RegularCar.final_num += 1

    # RegularCar 클래스로 만들어진 인스턴스에서만 사용할 수 있는 함수
    def status(self):
        print('일반 승용차입니다')

y = RegularCar('테슬라', 3000, True, ['pink','blue', 'red'], 2018)
so = RegularCar('G90', 11, True, ['pink','blue', 'red'], 2023) # RegularCar

# BankAccount라는 클래스를 만들어주세요.
class BankAccount:

    # _accont_num, _name, _balance, _password 라는 속성을 가집니다.
    def __init__(self, _accont_num, _name, _balance, _password):
        self._accont_num = _accont_num
        self._name = _name
        self._balance = _balance
        self._password = _password

    # get_pw() 인스턴스 메서드로 비밀번호를 조회만 할 수 있고
    @property    # getter 함수를 변수처럼 부를 수 있게 됩니다.
    def get_pw(self):
        return self._password


    # set_pw() 라는 인스턴스 메서드로 비밀번호를 변경만 할 수 있습니다.
    # def set_pw(self, _password): # set_pw('new')
    def set_pw(self, _password):
        self._password = _password

    # outer_balance() 라는 인스턴스 메서드로 금액을 확인만 할 수 있습니다.
    @property
    def outer_balance(self):
        return self._balance

    @outer_balance.setter # getter의 함수명과 일치해야 합니다.
    def outer_balance(self, bal):
        # 값이 0보다 큰지 비교해서 클때면 bal를 변경가능하게 조건을 확인하고
        # 현실과 컴퓨터가 인지하는 자료의 갭을 줄일 때도 은닉성을 활용하기도 한다.
        if bal > 0:
            self._balance = bal
        else:
            print('마이너스 통장이 아닙니다. 음수보다 작은 밸런스는 가질 수 없어요')

김연지 = BankAccount(1, '김연지', 30000, '1234')
김연지.get_pw # 함수지만 이제 변수처럼 호출하게 됩니다.
김연지.set_pw(1241)  # 변수명을 알려주면 ._password = 바꾼값
김연지.outer_balance # 함수를 변수처럼 사용합니다.
김연지.outer_balance = -10

# BankAccount라는 클래스를 만들어주세요.
class BankAccount:

    # _accont_num, _name, _balance, _password 라는 속성을 가집니다.
    def __init__(self, _accont_num, _name, _balance, _password):
        self.__accont_num = _accont_num
        self.__name = _name
        self.__balance = _balance
        self.__password = _password

    # get_pw() 인스턴스 메서드로 비밀번호를 조회만 할 수 있고
    @property    # getter 함수를 변수처럼 부를 수 있게 됩니다.
    def get_pw(self):
        return self.__password


    # set_pw() 라는 인스턴스 메서드로 비밀번호를 변경만 할 수 있습니다.
    # def set_pw(self, _password): # set_pw('new')
    def set_pw(self, _password):
        self.__password = _password

    # outer_balance() 라는 인스턴스 메서드로 금액을 확인만 할 수 있습니다.
    @property
    def outer_balance(self):
        return self.__balance

    @outer_balance.setter # getter의 함수명과 일치해야 합니다.
    def outer_balance(self, bal):
        # 값이 0보다 큰지 비교해서 클때면 bal를 변경가능하게 조건을 확인하고
        # 현실과 컴퓨터가 인지하는 자료의 갭을 줄일 때도 은닉성을 활용하기도 한다.
        if bal > 0:
            self.__balance = bal
        else:
            print('마이너스 통장이 아닙니다. 음수보다 작은 밸런스는 가질 수 없어요')

김연지 = BankAccount(1, '김연지', 30000, '1234')
김연지.get_pw # 함수지만 이제 변수처럼 호출하게 됩니다.
김연지.set_pw(1241)  # 변수명을 알려주면 ._password = 바꾼값
김연지.outer_balance # 함수를 변수처럼 사용합니다.
김연지.outer_balance = -10

# BankAccount의 모든 속성, 메서드를 상속받고 인스턴스변수로 has_ba T/F
class InsAccount(BankAccount):

        def __init__(self, _accont_num, _name, _balance, _password, _has_ba):
            super().__init__(_accont_num, _name, _balance, _password)
            self.__has_ba = _has_ba

        # 인스턴스메서드로 check_ba()
        # if bas_ba T : 은행 계좌도 가지고 계시는군요. False이면 하나 만드실래요?
        def check_ba(self):
            if self.__has_ba:
                print('은행 계좌도 가지고 계시는군요')
            else:
                print('은행 계좌 하나 만드실래요?')

class A:
  def __init__(self):
    print('A Class')
    self.공통속성 = '공통A'

class B(A):
  def __init__(self):
    print('B Class')
    self.__attr = 'B'
    self.공통속성 = '공통B'
    super().__init__()

class C(A):
  def __init__(self):
    print('C Class')
    self.__attr = 'C'
    self.공통속성 = '공통C'
    super().__init__()

# 다중상속 - 여러개 클래스의 기능, 속성을 한번에 상속받는 것을 의미합니다
class D(C, B):
  def __init__(self):
    print('D Class')
    super().__init__()

!pip install pydantic
# 예외와 class 상속을 가지고 아주 편하게 파이썬에서 불가능한 자료형 강제를 가능케하는 라이브러리

from pydantic import BaseModel

class Model2(BaseModel):
    name: str # 파라미터: 자료형
    age: int

def hello(person: Model2) -> str:
    return f"안녕하세요. {person.name}이고 나이는 {person.age}입니다."

hello(Model2(name='김연지', age=30))
hello(Model2(name=423, age=30))

Model2(name='김연지', age=30)
Model2(name=35, age=30) # 자료형 강제

while True:
    # try:
        read = input('c:\>')
        if read != 'x':
            print(read)
        else:
            raise EOFError # raise 명령어로 강제로 에러를 발생시킬 수 있습니다.

person2 = Model2(name=35, age=30) # 자료형 강제
